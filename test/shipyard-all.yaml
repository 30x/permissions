apiVersion: v1
kind: Namespace
metadata:
  name: apigee
  labels:
    name: apigee

---

apiVersion: v1
kind: Secret
metadata:
  name: sso
  namespace: apigee
type: Opaque
data:
  client-secret: U3RhanVRRTV1RDVld3JldA==

---

apiVersion: v1
kind: Secret
metadata:
  name: routing
  namespace: apigee
type: Opaque
data:
  private-api-key: cHJpdmF0ZS1zZWNyZXQ=

---

apiVersion: v1
kind: Namespace
metadata:
  name: shipyard
  labels:
    name: shipyard

---

apiVersion: v1
kind: Secret
metadata:
  name: routing
  namespace: shipyard
type: Opaque
data:
  private-api-key: cHJpdmF0ZS1zZWNyZXQ=

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: sso-proxy
  namespace: apigee
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: sso-proxy
        routable: "true"
      annotations:
        publicHosts: sso.k8s.dev
        publicPaths: 8000:/
    spec:
      containers:
        - name: sso-proxy
          image: thirtyx/sso-proxy:v1.0.4
          ports:
            - containerPort: 8000
          env:
            - name: DEBUG
              value: plugin:sso-proxy
            - name: SSO_PORT
              value: "8000"
            - name: SSO_PUBLIC_KEY_URL
              value: https://login.e2e.apigee.net/token_key
            - name: SSO_CLIENT_ID
              value: ssoproxy
            - name: SSO_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: sso
                  key: client-secret
            - name: SHIPYARD_PRIVATE_SECRET
              valueFrom:
                secretKeyRef:
                  name: routing
                  key: private-api-key
            - name: SSO_AUTH_URL
              value: https://login.e2e.apigee.net/oauth/authorize
            - name: SSO_TOKEN_URL
              value: https://login.e2e.apigee.net/oauth/token
            - name: SSO_CALLBACK_URL
              value: http://sso.k8s.dev/auth/sso/callback
            - name: SSO_PROXY_TARGET
              # We want all requests to be enforceable and we want to redirect to the internal router service with the name `internal-router`
              value: /->http://internal-router


---

####
# Deploys the ingress controller as a daemon set, then creates the external ELB to serve it traffic
###
apiVersion: extensions/v1beta1
kind: DaemonSet
# kind: Deployment
metadata:
  name: k8s-routers
  labels:
    app: k8s-routers
  namespace: apigee
spec:
  # replicas: 1
  template:
    metadata:
      labels:
        app: k8s-routers
    spec:
      containers:
      - image: thirtyx/k8s-router:latest
        imagePullPolicy: Always
        name: k8s-public-router
        ports:
          - containerPort: 80
            hostPort: 30555
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          # Use the configuration to use the public/private paradigm (public version)
          - name: API_KEY_SECRET_LOCATION
            value: routing:public-api-key
          - name: HOSTS_ANNOTATION
            value: publicHosts
          - name: PATHS_ANNOTATION
            value: publicPaths
      - image: thirtyx/k8s-router:latest
        imagePullPolicy: Always
        name: k8s-private-router
        ports:
          - containerPort: 81
            hostPort: 30556
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          # Use the configuration to use the public/private paradigm (private version)
          - name: API_KEY_SECRET_LOCATION
            # Use the same key for internal and external since the SSO Proxy does not know how to inject the proper private API Key upon redirect
            value: routing:private-api-key
            # value: routing:private-api-key
          - name: HOSTS_ANNOTATION
            value: privateHosts
          - name: PATHS_ANNOTATION
            value: privatePaths
          # Since we cannot have two containers listening on the same port, use a different port for the private router
          - name: PORT
            value: "81"

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: enrober
  labels:
    name: enrober
  namespace: shipyard
spec:
  replicas: 1
  selector:
    matchLabels:
      component: enrober
  template:
    metadata:
      labels:
        component: enrober
        routable: "true"
      annotations:
        privateHosts: "sso.k8s.dev"
        privatePaths: "9000:/environments"
    spec:
      containers:
      - name: enrober
        image: thirtyx/enrober:v0.4.5
        imagePullPolicy: Always
        env:
          - name: DEPLOY_STATE
            value: "DEV_CONTAINER"
          - name: JWTTOKENIMPL
            value: "test"
          - name: AUTH_API_HOST
            value: "api.e2e.apigee.net"
          - name: ECR_SECRET
            value: "false"
          - name: SHIPYARD_HOST
            value: "sso.k8s.dev"
          - name: INTERNAL_ROUTER_HOST
            value: "internal-router.apigee"
          - name: SHIPYARD_PRIVATE_SECRET
            valueFrom:
              secretKeyRef:
                name: routing
                key: private-api-key
        ports:
          - containerPort: 9000

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kiln
  labels:
    name: kiln
  namespace: shipyard
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: kiln
        routable: "true"
      annotations:
        privateHosts: "sso.k8s.dev"
        privatePaths: "5280:/imagespaces"
    spec:
      containers:
      - image: thirtyx/kiln:0.1.18
        imagePullPolicy: Always
        name: kiln
        ports:
        - containerPort: 5280
        env:
        - name: PORT
          value: "5280"
        - name: DOCKER_PROVIDER
          value: docker
        - name: DOCKER_HOST
          value: unix:///var/run/docker.sock
        - name: POD_PROVIDER
          value: local
        - name: SHUTDOWN_TIMEOUT
          value: "60"
        - name: AUTH_API_HOST
          value: api.e2e.apigee.net
        - name: NO_REAP
          value: "true"
        - name: LOCAL_REGISTRY_ONLY
          value: "true"
        - name: LOCAL_DIR
          value: /tmp/storagedir
        volumeMounts:
        - mountPath: /var/run/docker.sock
          name: dockersocket
          readOnly: false

      volumes:
      - name: dockersocket
        hostPath:
          path: /var/run/docker.sock

---

apiVersion: v1
kind: Service
metadata:
  name: internal-router # used by ssoproxy only
  namespace: apigee
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 81
  selector:
    app: k8s-routers
